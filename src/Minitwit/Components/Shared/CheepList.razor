@using Minitwit.Core.Entities
@using Minitwit.Infrastructure.Repository
@using ITU_minitwit.Models
@using Microsoft.AspNetCore.Identity
<h3>CheepList</h3>

<ul id="messagelist" class="cheeps">
    @foreach (CheepViewModel cheep in Cheeps)
    {
        <li>
            <div class="cheep-view">
                <div class="cheep-info">
                    <strong>
                        <a href="/@cheep.User.Username">@cheep.User.Username</a>
                        <p>Followers: @(await AuthorRepository.GetFollowersById(cheep.User.Id)).Count()</p>
                    </strong>
                    <p class="cheep-message">
                        @cheep.Message
                    </p>
                    <small>&mdash; @cheep.Timestamp</small>
                </div>
                <div class="reaction-box">
                    @if (SigninManager.IsSignedIn(User) && cheep.User.Username != User.Identity?.Name)
                    {
                        var user = await UserManager<>.GetUserAsync(User);
                        if (await ReactionRepository.HasUserReacted(cheep.CheepId, user.Id))
                        {
                            <form @submit:preventDefault="true" @onclick="() => RemoveReaction(cheep.CheepId, cheep.Reactions.First().ReactionType)">
                                <input class="reacted" type="submit" value="Like: @cheep.Reactions.First().ReactionCount" />
                            </form>
                        }
                        else
                        {
                            <form @submit:preventDefault="true" @onclick="() => React(cheep.CheepId, cheep.Reactions.First().ReactionType)">
                                <input type="submit" value="Like: @cheep.Reactions.First().ReactionCount" />
                            </form>
                        }
                    }
                    else
                    {
                        <u class="reactions-display">@cheep.Reactions.First().ReactionType: @cheep.Reactions.First().ReactionCount</u>
                    }
                </div>

                @if (SigninManager.IsSignedIn(User) && cheep.User.Username != User.Identity?.Name)
                {
                    var currentUser = await UserManager.GetUserAsync(User);
                    if (!await FollowRepository.IsFollowing(currentUser.Id, cheep.User.Id))
                    {
                        <form @submit:preventDefault="true" @onclick="() => Follow(cheep.User.Id)">
                            <input type="submit" value="Follow" />
                        </form>
                    }
                    else
                    {
                        <form @submit:preventDefault="true" @onclick="() => Unfollow(cheep.User.Id)">
                            <input type="submit" value="Unfollow" />
                        </form>
                    }
                }
            </div>
        </li>
    }
</ul>

<div style="display:flex;justify-content:center">
    <a href="@FirstPageUrl">[<<]</a>
    <a href="@PreviousPageUrl">@Model.PreviousPage</a>
    <a href="@CurrentPageUrl" style="margin-inline:10px">@Model.CurrentPage</a>
    <a href="@NextPageUrl">@Model.NextPage</a>
    <a href="@LastPageUrl">[>>]</a>
</div>

@code {
    [Parameter]
    public List<CheepViewModel> Cheeps { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public string FirstPageUrl { get; set; }

    [Parameter]
    public string PreviousPageUrl { get; set; }

    [Parameter]
    public string CurrentPageUrl { get; set; }

    [Parameter]
    public string NextPageUrl { get; set; }

    [Parameter]
    public string LastPageUrl { get; set; }

    private async Task React(string cheepId, string reactionType)
    {
        // Logic for reacting to a cheep
    }

    private async Task RemoveReaction(string cheepId, string reactionType)
    {
        // Logic for removing a reaction from a cheep
    }

    private async Task Follow(string userId)
    {
        // Logic for following a user
    }

    private async Task Unfollow(string userId)
    {
        // Logic for unfollowing a user
    }
}